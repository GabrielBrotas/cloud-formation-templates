AWSTemplateFormatVersion: '2010-09-09'
Description: External, public facing load balancer, for forwarding public traffic to containers
Parameters:
  EnvironmentName:
    Type: String
    Default: ecs-course

Resources:

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0 # allow every access from anywhere
            IpProtocol: -1 # all traffic
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg-public-load-balancer

   # create the alb and attach the subnets and sg
  PublicApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
      Name: !Sub ${EnvironmentName}-public-alb-ecs
  
  # ecs fargate target group 
  TargetGroupFargateService:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: ip # network mode aws-vpc
      UnhealthyThresholdCount: 2
      Name: !Sub ${EnvironmentName}-tg-fargate
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId

  # ecs ec2 target group
  TargetGroupEC2Service:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      Name: !Sub ${EnvironmentName}-tg-ec2
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
  
  # if path is /ec2/* forward the request to ecs ec2 target group
  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroupEC2Service'
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ec2/*
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  # if path is /fargate/* forward the request to ecs fargate target group
  ListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroupFargateService'
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /fargate/*
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 2    

  # if the request does not contain /ec2/* or /fargate/* redirect to the ec2 rule
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
              Protocol: "#{protocol}"
              Port: "#{port}"
              Host: "#{host}"
              Path: "/ec2/"
              StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'PublicApplicationLoadBalancer'
      Port: 80
      Protocol: HTTP

Outputs:
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PublicApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:ExternalUrl